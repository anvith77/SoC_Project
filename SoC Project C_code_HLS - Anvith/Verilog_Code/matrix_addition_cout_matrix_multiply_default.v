// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_addition_cout_matrix_multiply_default (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 13'b1;
parameter    ap_ST_st2_fsm_1 = 13'b10;
parameter    ap_ST_st3_fsm_2 = 13'b100;
parameter    ap_ST_st4_fsm_3 = 13'b1000;
parameter    ap_ST_st5_fsm_4 = 13'b10000;
parameter    ap_ST_st6_fsm_5 = 13'b100000;
parameter    ap_ST_st7_fsm_6 = 13'b1000000;
parameter    ap_ST_st8_fsm_7 = 13'b10000000;
parameter    ap_ST_st9_fsm_8 = 13'b100000000;
parameter    ap_ST_st10_fsm_9 = 13'b1000000000;
parameter    ap_ST_st11_fsm_10 = 13'b10000000000;
parameter    ap_ST_st12_fsm_11 = 13'b100000000000;
parameter    ap_ST_st13_fsm_12 = 13'b1000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm = 13'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_31;
wire   [1:0] r_fu_127_p2;
reg   [1:0] r_reg_286;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_62;
wire  signed [5:0] p_addr_cast_fu_155_p1;
reg  signed [5:0] p_addr_cast_reg_291;
wire   [0:0] exitcond2_fu_121_p2;
wire   [1:0] c_fu_165_p2;
reg   [1:0] c_reg_300;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_77;
wire   [5:0] tmp_i_i4_trn_cast_fu_171_p1;
reg   [5:0] tmp_i_i4_trn_cast_reg_305;
wire   [0:0] exitcond1_fu_159_p2;
wire   [1:0] k_fu_181_p2;
reg   [1:0] k_reg_314;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_91;
wire   [0:0] tmp_3_fu_187_p2;
reg   [0:0] tmp_3_reg_319;
wire   [0:0] exitcond_fu_175_p2;
reg   [31:0] cast_in_a_reg_334;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_108;
reg   [31:0] cast_in_b_reg_339;
wire   [31:0] grp_fu_113_p2;
reg   [31:0] mult_reg_344;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_118;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_127;
reg   [1:0] Row_assign_reg_76;
reg   [1:0] Col_assign_reg_87;
reg   [1:0] Col_assign_2_reg_98;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_148;
wire   [63:0] tmp_4_fu_210_p1;
wire   [63:0] tmp_6_fu_246_p1;
wire   [63:0] tmp_s_fu_259_p1;
reg   [31:0] sum_mult_fu_36;
wire   [31:0] grp_fu_109_p2;
wire   [31:0] grp_fu_109_p0;
wire   [31:0] grp_fu_109_p1;
wire   [31:0] grp_fu_113_p0;
wire   [31:0] grp_fu_113_p1;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_173;
wire   [3:0] tmp_fu_137_p3;
wire   [4:0] p_shl8_cast_fu_145_p1;
wire   [4:0] tmp_trn_cast_fu_133_p1;
wire   [4:0] p_addr_fu_149_p2;
wire   [5:0] tmp_i_i_trn_cast1_fu_193_p1;
wire  signed [5:0] p_addr1_fu_201_p2;
wire  signed [31:0] p_addr1_cast_fu_206_p1;
wire   [3:0] tmp_5_fu_215_p3;
wire   [4:0] p_shl9_cast_fu_223_p1;
wire   [4:0] tmp_i_i_trn_cast_fu_197_p1;
wire   [4:0] p_addr3_fu_227_p2;
wire  signed [5:0] p_addr3_cast_fu_233_p1;
wire  signed [5:0] p_addr4_fu_237_p2;
wire  signed [31:0] p_addr4_cast_fu_242_p1;
wire  signed [5:0] p_addr7_fu_251_p2;
wire  signed [31:0] p_addr7_cast_fu_255_p1;
wire    grp_fu_109_ce;
wire    grp_fu_113_ce;
reg   [12:0] ap_NS_fsm;


matrix_addition_cout_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_addition_cout_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_109_p0 ),
    .din1( grp_fu_109_p1 ),
    .ce( grp_fu_109_ce ),
    .dout( grp_fu_109_p2 )
);

matrix_addition_cout_fmul_32ns_32ns_32_3_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_addition_cout_fmul_32ns_32ns_32_3_max_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_113_p0 ),
    .din1( grp_fu_113_p1 ),
    .ce( grp_fu_113_ce ),
    .dout( grp_fu_113_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        Col_assign_2_reg_98 <= k_reg_314;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_159_p2))) begin
        Col_assign_2_reg_98 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_175_p2))) begin
        Col_assign_reg_87 <= c_reg_300;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_121_p2 == ap_const_lv1_0))) begin
        Col_assign_reg_87 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_159_p2))) begin
        Row_assign_reg_76 <= r_reg_286;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        Row_assign_reg_76 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        c_reg_300 <= c_fu_165_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        cast_in_a_reg_334 <= A_q0;
        cast_in_b_reg_339 <= B_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_reg_314 <= k_fu_181_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        mult_reg_344 <= grp_fu_113_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_121_p2 == ap_const_lv1_0))) begin
        p_addr_cast_reg_291 <= p_addr_cast_fu_155_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        r_reg_286 <= r_fu_127_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        sum_mult_fu_36 <= grp_fu_109_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond_fu_175_p2))) begin
        tmp_3_reg_319 <= tmp_3_fu_187_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_159_p2))) begin
        tmp_i_i4_trn_cast_reg_305[1 : 0] <= tmp_i_i4_trn_cast_fu_171_p1[1 : 0];
    end
end

/// A_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_ce0 = ap_const_logic_1;
    end else begin
        A_ce0 = ap_const_logic_0;
    end
end

/// B_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

/// C_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C_ce0 = ap_const_logic_1;
    end else begin
        C_ce0 = ap_const_logic_0;
    end
end

/// C_we0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond_fu_175_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_175_p2))) begin
        C_we0 = ap_const_logic_1;
    end else begin
        C_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_121_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_121_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_121_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_121_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_148)
begin
    if (ap_sig_bdd_148) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_31)
begin
    if (ap_sig_bdd_31) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_62)
begin
    if (ap_sig_bdd_62) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_77)
begin
    if (ap_sig_bdd_77) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_91)
begin
    if (ap_sig_bdd_91) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_108)
begin
    if (ap_sig_bdd_108) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_173)
begin
    if (ap_sig_bdd_173) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_118)
begin
    if (ap_sig_bdd_118) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_127)
begin
    if (ap_sig_bdd_127) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_121_p2 or exitcond1_fu_159_p2 or exitcond_fu_175_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_121_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_159_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_175_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_4_fu_210_p1;
assign B_address0 = tmp_6_fu_246_p1;
assign C_address0 = tmp_s_fu_259_p1;
assign C_d0 = sum_mult_fu_36;

/// ap_sig_bdd_108 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_108 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_118 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_118 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_127 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_127 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_148 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_148 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_173 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_173 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_31 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_31 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_62 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_62 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_77 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_77 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_91 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_91 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign c_fu_165_p2 = (Col_assign_reg_87 + ap_const_lv2_1);
assign exitcond1_fu_159_p2 = (Col_assign_reg_87 == ap_const_lv2_3? 1'b1: 1'b0);
assign exitcond2_fu_121_p2 = (Row_assign_reg_76 == ap_const_lv2_3? 1'b1: 1'b0);
assign exitcond_fu_175_p2 = (Col_assign_2_reg_98 == ap_const_lv2_3? 1'b1: 1'b0);
assign grp_fu_109_ce = ap_const_logic_1;
assign grp_fu_109_p0 = ((tmp_3_reg_319[0:0]===1'b1)? ap_const_lv32_0: sum_mult_fu_36);
assign grp_fu_109_p1 = mult_reg_344;
assign grp_fu_113_ce = ap_const_logic_1;
assign grp_fu_113_p0 = cast_in_a_reg_334;
assign grp_fu_113_p1 = cast_in_b_reg_339;
assign k_fu_181_p2 = (Col_assign_2_reg_98 + ap_const_lv2_1);
assign p_addr1_cast_fu_206_p1 = p_addr1_fu_201_p2;
assign p_addr1_fu_201_p2 = ($signed(p_addr_cast_reg_291) + $signed(tmp_i_i_trn_cast1_fu_193_p1));
assign p_addr3_cast_fu_233_p1 = $signed(p_addr3_fu_227_p2);
assign p_addr3_fu_227_p2 = (p_shl9_cast_fu_223_p1 - tmp_i_i_trn_cast_fu_197_p1);
assign p_addr4_cast_fu_242_p1 = p_addr4_fu_237_p2;
assign p_addr4_fu_237_p2 = ($signed(p_addr3_cast_fu_233_p1) + $signed(tmp_i_i4_trn_cast_reg_305));
assign p_addr7_cast_fu_255_p1 = p_addr7_fu_251_p2;
assign p_addr7_fu_251_p2 = ($signed(p_addr_cast_reg_291) + $signed(tmp_i_i4_trn_cast_reg_305));
assign p_addr_cast_fu_155_p1 = $signed(p_addr_fu_149_p2);
assign p_addr_fu_149_p2 = (p_shl8_cast_fu_145_p1 - tmp_trn_cast_fu_133_p1);
assign p_shl8_cast_fu_145_p1 = tmp_fu_137_p3;
assign p_shl9_cast_fu_223_p1 = tmp_5_fu_215_p3;
assign r_fu_127_p2 = (Row_assign_reg_76 + ap_const_lv2_1);
assign tmp_3_fu_187_p2 = (Col_assign_2_reg_98 == ap_const_lv2_0? 1'b1: 1'b0);
assign tmp_4_fu_210_p1 = $unsigned(p_addr1_cast_fu_206_p1);
assign tmp_5_fu_215_p3 = {{Col_assign_2_reg_98}, {ap_const_lv2_0}};
assign tmp_6_fu_246_p1 = $unsigned(p_addr4_cast_fu_242_p1);
assign tmp_fu_137_p3 = {{Row_assign_reg_76}, {ap_const_lv2_0}};
assign tmp_i_i4_trn_cast_fu_171_p1 = Col_assign_reg_87;
assign tmp_i_i_trn_cast1_fu_193_p1 = Col_assign_2_reg_98;
assign tmp_i_i_trn_cast_fu_197_p1 = Col_assign_2_reg_98;
assign tmp_s_fu_259_p1 = $unsigned(p_addr7_cast_fu_255_p1);
assign tmp_trn_cast_fu_133_p1 = Row_assign_reg_76;
always @ (posedge ap_clk)
begin
    tmp_i_i4_trn_cast_reg_305[5:2] <= 4'b0000;
end



endmodule //matrix_addition_cout_matrix_multiply_default

